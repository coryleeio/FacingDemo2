= StreamingAssets/My Mod
	= About
		- About.yml - Required file with contents:
		     Name: My Mod
		     Description:
		     Author:
		     Version:
		- Preview.png - Optional image to represent mod in the game
	= Assemblies
	    - My Mod.dll
	= Asset Bundles
	    - My Mod - Optional asset bundle which you can use to include images or spine skeletons
	               One caveat here is that the bundles themselves cannot share a name with any other bundles in any other mods
	               So My Mod.assetbundle is a good starting point.
	= Definitions
	    - My Mod.sql - Optional sql which you can use to modify the definitions and templates in the game.
    = Localizations (Language files)
        - English.yml
	= Source (Optional folder, containing your mod's source code. You can include assemblies without Source.
	    - My Mod.cs


How to add assets: 
You need to bake an asset bundle
make a new unity project





Create a folder called editor and put this c# script named CreateAssetBundles inside the folder Editor:
    using UnityEditor;
    using System.IO;

    public class CreateAssetBundles
    {
        [MenuItem("Tools/Create Asset Bundle")]
        static void BuildAssetBundles()
        {
            string assetBundleDirectory = "Assets/Bundles";
            if (!Directory.Exists(assetBundleDirectory))
            {
                Directory.create(assetBundleDirectory);
            }
            BuildPipeline.BuildAssetBundles(assetBundleDirectory, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows64);
        }
    }

    also create ImportPostProcessor inside the folder Editor

	using UnityEditor;
	using UnityEngine;
    public class ImportPostProcessor : AssetPostprocessor
    {
        void OnPreprocessAsset()
        {
            if (assetImporter != null)
            {
                assetImporter.assetBundleName = "MyModNameGoesHere";
            }
        }
    }



Add all the sprites Resources
Now go to Assets > Reimport All (this will add all the assets to an asset bundle called 'MyModNameGoesHere')
Then go to Tools -> Create Asset Bundle

This will create a file named Assets/Bundles/mymodnamegoeshere

it also creates a bunch of useless files that you can ignore in here including a .meta file which you can ignore.

copy this file into (GameInstallFolder)/Mods/(YourModName)/Asset Bundles/
Your sprites and Spine characters will now be available for reference in the Definitions in the same way the base game assets are referenced(just use the file name of the sprite or the SkeletonData asset from spine.)

You may make any adjustments you would typically make to the assets such as adjusting pivot points etc, they will be saved in the asset bundle. 


TIP: For items you will want to set the pivot point to where the character should hold the item.






How to add animated characters
You will need to own and install Spine and http://esotericsoftware.com/spine-unity

Export your character into unity and let it generate a SpineData export. Do this in the resources folder, then follow the process for sprites, your animated character will need to be referenced in the SQL as is done in the core module.












How to setup vs2017 project (How to add code):

Create a new class library project
Once loaded, go to File -> New -> Project...
Go to Templates -> Visual C# -> Class Library (Be sure to select the *.NET Framework* version, not *.NET Standard*)

Installing the .NET framework
Enter your name and solution name in the lower pane.
Choose a location, preferably:
(GameInstallFolder)/Mods/(YourModName)/Source
Optional: Untick "Create directory for solution"
In your project, set target framework and various other porperties
In your Solution Explorer, right click your project -> Properties
Once in your properties, select Application -> Set Target Framework to .NET Framework 4.0 (No client profile)
Optional: Change your Assembly and Namespace names to anything of your choice
Go to Build -> Advanced... and set "Debugging information" to none
Leave Advanced..., and set the Output Path to "..\..\Assemblies\" (The Assemblies folder in your mod folder)
Add references to Game code
Expand your project. Then right click "References" -> Add Reference...
Click Browse...
Navigate towards
Game******/Game******_Data/Managed
and select files: 
Assembly-CSharp.dll
UnityEngine.dll
Click "Add"
Click "OK" to close the Reference Manager.
Right click on both Assembly-CSharp.dll and UnityEngine.dll and set Copy Local to False (Properties pane).



How to add new definitions ( new items, loot drops, make your sprites / characters appear in game, etc):
	= Definitions
	    - My Mod.sql - Optional sql which you can use to modify the definitions and templates in the game.

	    Just drop your sql in here, it will be run after the core sql is run, you can look inside the Core mod's definitions to see all the existing items / templates / loot tables etc.
	    You can modify any of these using your own SQL dropped into this folder.  If you have added sprites / etc you will need to tie them to items / characters etc by using sql.  See the core mod for examples